@page "/user/register"
@inject IClient httpClient
@inject NavigationManager _navManager


<h3>Register new user.</h3>

@if(string.IsNullOrEmpty(message) == false)
{
    <div class="alert alert-danger">
        <p>@message</p>
    </div>
}

<div class="card-body">
    <EditForm Model="UserRegisterModel" OnValidSubmit="HandleRegistration">
        <DataAnnotationsValidator/>
        <ValidationSummary/>
        <div class="form-group">
            <label for="username">Username</label>
            <InputText class="form-control" @bind-Value="UserRegisterModel.Username"></InputText>
            <ValidationMessage For="@(()=> UserRegisterModel.FirstName)"/>
        </div>               
        <div class="form-group">
            <label for="firstName">First Name</label>
            <InputText class="form-control" @bind-Value="UserRegisterModel.FirstName"></InputText>
            <ValidationMessage For="@(()=> UserRegisterModel.FirstName)"/>
        </div>       
        <div class="form-group">
            <label for="firstName">Lastname</label>
            <InputText class="form-control" @bind-Value="UserRegisterModel.LastName"></InputText>
            <ValidationMessage For="@(()=> UserRegisterModel.FirstName)"/>
        </div>       
        <div class="form-group">
            <label for="firstName">Password</label>
            <InputText class="form-control" type="password" @bind-Value="UserRegisterModel.Password"></InputText>
            <ValidationMessage For="@(()=> UserRegisterModel.FirstName)"/>
        </div>
        <div class="form-group">
        <label for="firstName">Date of birth</label>
            <InputDate class="date" @bind-Value="UserRegisterModel.DateOfBirth"></InputDate>
            <ValidationMessage For="@(()=> UserRegisterModel.DateOfBirth)"/>
        </div>

        <button type="submit" class="btn btn-primary btn-block">Registuar</button>

    </EditForm>
</div>

@code {
    UserRegisterDto UserRegisterModel = new UserRegisterDto();
    string message = string.Empty;

    private async Task HandleRegistration()
    {
        try
        {
            await httpClient.RegisterAsync(UserRegisterModel);
            _navManager.NavigateTo("/user/login");
        }
        catch(ApiException e)
        {
            message = e.Response;
        }
    }
}
